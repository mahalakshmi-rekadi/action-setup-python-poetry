name: "Install Python and Poetry"
author: "Marcel Arns"
description: "Set up a specific version of Poetry with specific version of Python and install dependencies"
inputs:
  poetry_version:
    description: "Poetry version to install"
    required: true
    default: "1.2.0"
  python_version:
    description: "Python version to use"
    required: true
    default: "3.10.6"
  ssh_key:
    description: "SSH key to use to clone private repositories"
    required: false
  poetry_virtualenvs_path:
    description: "Poetry virtualenvs path"
    required: false
    default: "/home/runner/.cache/pypoetry/virtualenvs"

outputs:
  python-version:
    description: "Python version"
    value: ${{ inputs.python_version }}

runs:
  using: "composite"
  steps:
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python_version }}

    - name: Install and configure Poetry
      shell: bash
      run: |
        curl -sSL https://install.python-poetry.org | python - --yes --version=${{ inputs.poetry_version }}
        echo "$HOME/.poetry/bin" >> $GITHUB_PATH

    - name: Restore virtualenv from Poetry cache
      uses: actions/cache@v3
      id: poetry-cache
      with:
        path: ${{ inputs.poetry_virtualenvs_path }}
        key: poetry-${{ inputs.python_version }}-${{ hashFiles('**/poetry.lock', '**/pyproject.toml') }}

    - run: poetry lock --check
      shell: bash

    - name: Create virtualenv and install dependencies
      if: steps.poetry-cache.outputs.cache-hit != 'true'
      shell: bash
      env:
        POETRY_VIRTUALENVS_PATH: ${{ inputs.poetry_virtualenvs_path }}
      run: |
        if [ ! -z "${{ inputs.ssh_key }}" ]; then
            eval "$(ssh-agent -s)"
            ssh-add - <<< "${{ inputs.ssh_key }}"
        fi

        poetry install
